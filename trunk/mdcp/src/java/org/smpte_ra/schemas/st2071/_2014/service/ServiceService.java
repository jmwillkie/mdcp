package org.smpte_ra.schemas.st2071._2014.service;

import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;

/**
 * This class was generated by Apache CXF 2.7.10
 * 2014-03-09T14:42:23.458-04:00
 * Generated source version: 2.7.10
 * 
 */
@WebServiceClient(name = "ServiceService", 
                  wsdlLocation = "service_services.wsdl",
                  targetNamespace = "http://www.smpte-ra.org/schemas/st2071/2014/service") 
public class ServiceService extends javax.xml.ws.Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://www.smpte-ra.org/schemas/st2071/2014/service", "ServiceService");
    public final static QName ServiceDirectoryPort = new QName("http://www.smpte-ra.org/schemas/st2071/2014/service", "ServiceDirectoryPort");
    public final static QName ServicePort = new QName("http://www.smpte-ra.org/schemas/st2071/2014/service", "ServicePort");
    public final static QName ServiceFactoryPort = new QName("http://www.smpte-ra.org/schemas/st2071/2014/service", "ServiceFactoryPort");
    public final static QName ServiceRegistryPort = new QName("http://www.smpte-ra.org/schemas/st2071/2014/service", "ServiceRegistryPort");
    static {
        URL url = ServiceService.class.getResource("service_services.wsdl");
        if (url == null) {
            url = ServiceService.class.getClassLoader().getResource("service_services.wsdl");
        } 
        if (url == null) {
            java.util.logging.Logger.getLogger(ServiceService.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", "service_services.wsdl");
        }       
        WSDL_LOCATION = url;
    }

    public ServiceService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public ServiceService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public ServiceService() {
        super(WSDL_LOCATION, SERVICE);
    }
    
    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public ServiceService(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public ServiceService(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public ServiceService(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }

    /**
     *
     * @return
     *     returns ServiceDirectory
     */
    @WebEndpoint(name = "ServiceDirectoryPort")
    public ServiceDirectory getServiceDirectoryPort() {
        return super.getPort(ServiceDirectoryPort, ServiceDirectory.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns ServiceDirectory
     */
    @WebEndpoint(name = "ServiceDirectoryPort")
    public ServiceDirectory getServiceDirectoryPort(WebServiceFeature... features) {
        return super.getPort(ServiceDirectoryPort, ServiceDirectory.class, features);
    }
    /**
     *
     * @return
     *     returns Service
     */
    @WebEndpoint(name = "ServicePort")
    public Service getServicePort() {
        return super.getPort(ServicePort, Service.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns Service
     */
    @WebEndpoint(name = "ServicePort")
    public Service getServicePort(WebServiceFeature... features) {
        return super.getPort(ServicePort, Service.class, features);
    }
    /**
     *
     * @return
     *     returns ServiceFactory
     */
    @WebEndpoint(name = "ServiceFactoryPort")
    public ServiceFactory getServiceFactoryPort() {
        return super.getPort(ServiceFactoryPort, ServiceFactory.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns ServiceFactory
     */
    @WebEndpoint(name = "ServiceFactoryPort")
    public ServiceFactory getServiceFactoryPort(WebServiceFeature... features) {
        return super.getPort(ServiceFactoryPort, ServiceFactory.class, features);
    }
    /**
     *
     * @return
     *     returns ServiceRegistry
     */
    @WebEndpoint(name = "ServiceRegistryPort")
    public ServiceRegistry getServiceRegistryPort() {
        return super.getPort(ServiceRegistryPort, ServiceRegistry.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns ServiceRegistry
     */
    @WebEndpoint(name = "ServiceRegistryPort")
    public ServiceRegistry getServiceRegistryPort(WebServiceFeature... features) {
        return super.getPort(ServiceRegistryPort, ServiceRegistry.class, features);
    }

}
