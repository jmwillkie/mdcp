package org.smpte.st2071._2014.device;


/**
* org/smpte/st2071/_2014/device/_DeviceDirectoryStub.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from MDCF.idl
* Thursday, March 20, 2014 1:55:28 PM EDT
*/

public class _DeviceDirectoryStub extends org.omg.CORBA.portable.ObjectImpl implements org.smpte.st2071._2014.device.DeviceDirectory
{


  // UCN = "urn:smpte:ucn:org.smpte.st2071:device_directory_v1.0";
  public org.smpte.st2071._2014.device.DeviceInformation ParentDeviceDirectory ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_ParentDeviceDirectory", true);
                $in = _invoke ($out);
                org.smpte.st2071._2014.device.DeviceInformation $result = org.smpte.st2071._2014.device.DeviceInformationHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return ParentDeviceDirectory (        );
            } finally {
                _releaseReply ($in);
            }
  } // ParentDeviceDirectory


  // raises (org::smpte::st2071::_2014::security::SecurityException);
  public org.smpte.st2071._2014.identity.UDN[] Namespaces ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_Namespaces", true);
                $in = _invoke ($out);
                org.smpte.st2071._2014.identity.UDN $result[] = org.smpte.st2071._2014.identity.UDNsHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return Namespaces (        );
            } finally {
                _releaseReply ($in);
            }
  } // Namespaces


  // raises (org::smpte::st2071::_2014::security::SecurityException);
  public org.smpte.st2071._2014.device.DeviceInformation[] ancestors (org.smpte.st2071._2014.identity.UDN udn) throws org.smpte.st2071._2014.device.DeviceNotFound, org.smpte.st2071._2014.security.SecurityException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("ancestors", true);
                org.smpte.st2071._2014.identity.UDNHelper.write ($out, udn);
                $in = _invoke ($out);
                org.smpte.st2071._2014.device.DeviceInformation $result[] = org.smpte.st2071._2014.device.DeviceInformationsHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:org/smpte/st2071/_2014/device/DeviceNotFound:1.0"))
                    throw org.smpte.st2071._2014.device.DeviceNotFoundHelper.read ($in);
                else if (_id.equals ("IDL:org/smpte/st2071/_2014/security/SecurityException:1.0"))
                    throw org.smpte.st2071._2014.security.SecurityExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return ancestors (udn        );
            } finally {
                _releaseReply ($in);
            }
  } // ancestors

  public org.smpte.st2071._2014.device.DeviceInformation lookup (org.smpte.st2071._2014.identity.UDN udn) throws org.smpte.st2071._2014.device.DeviceNotFound, org.smpte.st2071._2014.security.SecurityException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("lookup", true);
                org.smpte.st2071._2014.identity.UDNHelper.write ($out, udn);
                $in = _invoke ($out);
                org.smpte.st2071._2014.device.DeviceInformation $result = org.smpte.st2071._2014.device.DeviceInformationHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:org/smpte/st2071/_2014/device/DeviceNotFound:1.0"))
                    throw org.smpte.st2071._2014.device.DeviceNotFoundHelper.read ($in);
                else if (_id.equals ("IDL:org/smpte/st2071/_2014/security/SecurityException:1.0"))
                    throw org.smpte.st2071._2014.security.SecurityExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return lookup (udn        );
            } finally {
                _releaseReply ($in);
            }
  } // lookup

  public org.smpte.st2071._2014.device.DeviceInformation parent (org.smpte.st2071._2014.identity.UDN udn) throws org.smpte.st2071._2014.device.DeviceNotFound, org.smpte.st2071._2014.security.SecurityException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("parent", true);
                org.smpte.st2071._2014.identity.UDNHelper.write ($out, udn);
                $in = _invoke ($out);
                org.smpte.st2071._2014.device.DeviceInformation $result = org.smpte.st2071._2014.device.DeviceInformationHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:org/smpte/st2071/_2014/device/DeviceNotFound:1.0"))
                    throw org.smpte.st2071._2014.device.DeviceNotFoundHelper.read ($in);
                else if (_id.equals ("IDL:org/smpte/st2071/_2014/security/SecurityException:1.0"))
                    throw org.smpte.st2071._2014.security.SecurityExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return parent (udn        );
            } finally {
                _releaseReply ($in);
            }
  } // parent

  public org.smpte.st2071._2014.device.DeviceInformation[] children (org.smpte.st2071._2014.identity.UDN udn, org.smpte.st2071._2014.query.QueryExpression filter) throws org.smpte.st2071._2014.device.DeviceNotFound, org.smpte.st2071._2014.query.InvalidQuery, org.smpte.st2071._2014.security.SecurityException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("children", true);
                org.smpte.st2071._2014.identity.UDNHelper.write ($out, udn);
                org.smpte.st2071._2014.query.QueryExpressionHelper.write ($out, filter);
                $in = _invoke ($out);
                org.smpte.st2071._2014.device.DeviceInformation $result[] = org.smpte.st2071._2014.device.DeviceInformationsHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:org/smpte/st2071/_2014/device/DeviceNotFound:1.0"))
                    throw org.smpte.st2071._2014.device.DeviceNotFoundHelper.read ($in);
                else if (_id.equals ("IDL:org/smpte/st2071/_2014/query/InvalidQuery:1.0"))
                    throw org.smpte.st2071._2014.query.InvalidQueryHelper.read ($in);
                else if (_id.equals ("IDL:org/smpte/st2071/_2014/security/SecurityException:1.0"))
                    throw org.smpte.st2071._2014.security.SecurityExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return children (udn, filter        );
            } finally {
                _releaseReply ($in);
            }
  } // children

  public org.smpte.st2071._2014.device.DeviceInformation[] siblings (org.smpte.st2071._2014.identity.UDN udn, org.smpte.st2071._2014.query.QueryExpression filter) throws org.smpte.st2071._2014.device.DeviceNotFound, org.smpte.st2071._2014.query.InvalidQuery, org.smpte.st2071._2014.security.SecurityException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("siblings", true);
                org.smpte.st2071._2014.identity.UDNHelper.write ($out, udn);
                org.smpte.st2071._2014.query.QueryExpressionHelper.write ($out, filter);
                $in = _invoke ($out);
                org.smpte.st2071._2014.device.DeviceInformation $result[] = org.smpte.st2071._2014.device.DeviceInformationsHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:org/smpte/st2071/_2014/device/DeviceNotFound:1.0"))
                    throw org.smpte.st2071._2014.device.DeviceNotFoundHelper.read ($in);
                else if (_id.equals ("IDL:org/smpte/st2071/_2014/query/InvalidQuery:1.0"))
                    throw org.smpte.st2071._2014.query.InvalidQueryHelper.read ($in);
                else if (_id.equals ("IDL:org/smpte/st2071/_2014/security/SecurityException:1.0"))
                    throw org.smpte.st2071._2014.security.SecurityExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return siblings (udn, filter        );
            } finally {
                _releaseReply ($in);
            }
  } // siblings

  public org.smpte.st2071._2014.device.DeviceInformation[] search (org.smpte.st2071._2014.identity.UDN udn, org.smpte.st2071._2014.query.QueryExpression filter) throws org.smpte.st2071._2014.device.DeviceNotFound, org.smpte.st2071._2014.query.InvalidQuery, org.smpte.st2071._2014.security.SecurityException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("search", true);
                org.smpte.st2071._2014.identity.UDNHelper.write ($out, udn);
                org.smpte.st2071._2014.query.QueryExpressionHelper.write ($out, filter);
                $in = _invoke ($out);
                org.smpte.st2071._2014.device.DeviceInformation $result[] = org.smpte.st2071._2014.device.DeviceInformationsHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:org/smpte/st2071/_2014/device/DeviceNotFound:1.0"))
                    throw org.smpte.st2071._2014.device.DeviceNotFoundHelper.read ($in);
                else if (_id.equals ("IDL:org/smpte/st2071/_2014/query/InvalidQuery:1.0"))
                    throw org.smpte.st2071._2014.query.InvalidQueryHelper.read ($in);
                else if (_id.equals ("IDL:org/smpte/st2071/_2014/security/SecurityException:1.0"))
                    throw org.smpte.st2071._2014.security.SecurityExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return search (udn, filter        );
            } finally {
                _releaseReply ($in);
            }
  } // search

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:org/smpte/st2071/2014/device/DeviceDirectory:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }

  private void readObject (java.io.ObjectInputStream s) throws java.io.IOException
  {
     String str = s.readUTF ();
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     org.omg.CORBA.Object obj = orb.string_to_object (str);
     org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl) obj)._get_delegate ();
     _set_delegate (delegate);
   } finally {
     orb.destroy() ;
   }
  }

  private void writeObject (java.io.ObjectOutputStream s) throws java.io.IOException
  {
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     String str = orb.object_to_string (this);
     s.writeUTF (str);
   } finally {
     orb.destroy() ;
   }
  }
} // class _DeviceDirectoryStub
