package org.smpte.st2071._2014.session;


/**
* org/smpte/st2071/_2014/session/_RequestableStub.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from MDCF.idl
* Thursday, March 20, 2014 1:55:28 PM EDT
*/

public class _RequestableStub extends org.omg.CORBA.portable.ObjectImpl implements org.smpte.st2071._2014.session.Requestable
{


  // UCN = "urn:smpte:ucn:org.smpte.st2071:requestable_v1.0";
  public org.smpte.st2071._2014.identity.URI request (org.smpte.st2071._2014.identity.URI session, String name, String message) throws org.smpte.st2071._2014.session.SessionNotFound, org.smpte.st2071._2014.session.RequestDenied, org.smpte.st2071._2014.session.NotAcquired, org.smpte.st2071._2014.security.SecurityException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("request", true);
                org.smpte.st2071._2014.identity.URIHelper.write ($out, session);
                $out.write_wstring (name);
                $out.write_wstring (message);
                $in = _invoke ($out);
                org.smpte.st2071._2014.identity.URI $result = org.smpte.st2071._2014.identity.URIHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:org/smpte/st2071/_2014/session/SessionNotFound:1.0"))
                    throw org.smpte.st2071._2014.session.SessionNotFoundHelper.read ($in);
                else if (_id.equals ("IDL:org/smpte/st2071/_2014/session/RequestDenied:1.0"))
                    throw org.smpte.st2071._2014.session.RequestDeniedHelper.read ($in);
                else if (_id.equals ("IDL:org/smpte/st2071/_2014/session/NotAcquired:1.0"))
                    throw org.smpte.st2071._2014.session.NotAcquiredHelper.read ($in);
                else if (_id.equals ("IDL:org/smpte/st2071/_2014/security/SecurityException:1.0"))
                    throw org.smpte.st2071._2014.security.SecurityExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return request (session, name, message        );
            } finally {
                _releaseReply ($in);
            }
  } // request

  public void approve (org.smpte.st2071._2014.identity.URI request) throws org.smpte.st2071._2014.session.RequestNotFound, org.smpte.st2071._2014.session.RequestExpired, org.smpte.st2071._2014.security.SecurityException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("approve", true);
                org.smpte.st2071._2014.identity.URIHelper.write ($out, request);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:org/smpte/st2071/_2014/session/RequestNotFound:1.0"))
                    throw org.smpte.st2071._2014.session.RequestNotFoundHelper.read ($in);
                else if (_id.equals ("IDL:org/smpte/st2071/_2014/session/RequestExpired:1.0"))
                    throw org.smpte.st2071._2014.session.RequestExpiredHelper.read ($in);
                else if (_id.equals ("IDL:org/smpte/st2071/_2014/security/SecurityException:1.0"))
                    throw org.smpte.st2071._2014.security.SecurityExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                approve (request        );
            } finally {
                _releaseReply ($in);
            }
  } // approve

  public void deny (org.smpte.st2071._2014.identity.URI request, String message) throws org.smpte.st2071._2014.session.RequestNotFound, org.smpte.st2071._2014.session.RequestExpired, org.smpte.st2071._2014.security.SecurityException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("deny", true);
                org.smpte.st2071._2014.identity.URIHelper.write ($out, request);
                $out.write_wstring (message);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:org/smpte/st2071/_2014/session/RequestNotFound:1.0"))
                    throw org.smpte.st2071._2014.session.RequestNotFoundHelper.read ($in);
                else if (_id.equals ("IDL:org/smpte/st2071/_2014/session/RequestExpired:1.0"))
                    throw org.smpte.st2071._2014.session.RequestExpiredHelper.read ($in);
                else if (_id.equals ("IDL:org/smpte/st2071/_2014/security/SecurityException:1.0"))
                    throw org.smpte.st2071._2014.security.SecurityExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                deny (request, message        );
            } finally {
                _releaseReply ($in);
            }
  } // deny

  public org.smpte.st2071._2014.identity.URI take (org.smpte.st2071._2014.identity.URI session, String name, String message) throws org.smpte.st2071._2014.session.SessionNotFound, org.smpte.st2071._2014.session.NotAcquired, org.smpte.st2071._2014.security.SecurityException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("take", true);
                org.smpte.st2071._2014.identity.URIHelper.write ($out, session);
                $out.write_wstring (name);
                $out.write_wstring (message);
                $in = _invoke ($out);
                org.smpte.st2071._2014.identity.URI $result = org.smpte.st2071._2014.identity.URIHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:org/smpte/st2071/_2014/session/SessionNotFound:1.0"))
                    throw org.smpte.st2071._2014.session.SessionNotFoundHelper.read ($in);
                else if (_id.equals ("IDL:org/smpte/st2071/_2014/session/NotAcquired:1.0"))
                    throw org.smpte.st2071._2014.session.NotAcquiredHelper.read ($in);
                else if (_id.equals ("IDL:org/smpte/st2071/_2014/security/SecurityException:1.0"))
                    throw org.smpte.st2071._2014.security.SecurityExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return take (session, name, message        );
            } finally {
                _releaseReply ($in);
            }
  } // take

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:org/smpte/st2071/2014/session/Requestable:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }

  private void readObject (java.io.ObjectInputStream s) throws java.io.IOException
  {
     String str = s.readUTF ();
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     org.omg.CORBA.Object obj = orb.string_to_object (str);
     org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl) obj)._get_delegate ();
     _set_delegate (delegate);
   } finally {
     orb.destroy() ;
   }
  }

  private void writeObject (java.io.ObjectOutputStream s) throws java.io.IOException
  {
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     String str = orb.object_to_string (this);
     s.writeUTF (str);
   } finally {
     orb.destroy() ;
   }
  }
} // class _RequestableStub
